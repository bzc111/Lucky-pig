1.全局配置文件mybatis-config.xml 放一些运行环境的信息
 1.1 <typeAliases>
		<!-- 
		<typeAlias type="com.briup.pojo.Student" alias="Student" />
		<typeAlias type="com.briup.homework.Teacher" alias="Teacher" /> -->
		
		<!-- 给指定包下面所有的类设置别名，别名就是类名本身 -->
		<package name="bean"/>
	</typeAliases>  设置别名
 1.2<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="oracle.jdbc.driver.OracleDriver" /> 
				<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" /> 
				<property name="username" value="briup" />
				<property name="password" value="briup" />
			</dataSource>
		</environment>
	</environments> 数据库信息
 1.3<mappers>
		<mapper resource="EmployeeMapper.xml"/>
	</mappers> 注册映射文件
2.mapper.xml映射文件 简化持久层也就是sql语句那一部分
 2.1 namespace 名称空间 对应的是基础类bean
 2.2 id 唯一标识，可以理解成一个特定的指针，或者方法名【将来认为方法名称】，将来要用的 
 2.3 resultType 返回值类型 也就是将来需要的查询出来的对象 与namespace对应的基础类一致
 2.4  #{id} 从传递过来的参数中取出id值 也就是获取传入的参数
1,2 都属于项目的配置文件 资源文件 所以若果不想在src下面直接放他们的话  就要额外的创建source Folder文件夹 不能是普通的文件夹，否则找不到
3.test
          1.根据mybatis-config.xml文件（全局配置） 创建一个sqlSessionFactory工厂，要他主要就是获取sqlsession
		 String resource  = "mybatis-config.xml";
		 InputStream inputStream  = Resources.getResourceAsStream(resource);
		 SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);
		 2.用sqlsession工厂获取sqlsession对象,能直接执行已经映射的sql语句
		 SqlSession openSession = factory.openSession();
		 3. 用sqlsession对象来进行增删查改
		 每一个session就是一次对话，用完关闭
		 select 两个参数 第一个：sql的唯一标识 也就是配置文件中的id（来告诉mybatis执行哪一个sql语句）
		                                                    第二个： 执行sql用的参数
		  为了以防万一 一般是namespace+id :  bean.EmployeeMapper.selectEmp
		 try {
		 Employee employee = (Employee)openSession.selectOne("selectEmp", 1);
		 System.out.println(employee); 
		4.关掉session
		 }finally{
		     openSession.close();
		 }
4.数据库的创建 
 1.Navicat 编辑器创建 这时候在mapper中，数据库名字要加"";
 2.在命令面板直接创建不要加"";
5.查询字段问题
给字段对应不上的起一个别名，基础类中的属性放在前面中间一个空格 紧跟数据库中的对应的字段